---
2:
  id: 2
  name: WEB_CMA
  cancel_url: /offers/WEB_CMA/processor
  element: processor
  redirect_to: ''
  steps_count: 6
  attrs_count: 16
  nav: false
  first_step_id: 5
  last_step_id: 11
  created_at: 2012-11-21 21:21:21.003641000 Z
  updated_at: 2012-12-04 23:28:01.232940000 Z
  steps:
    5:
      id: 5
      form_id: 2
      name: start
      template: processor/steps/start
      prev_step_id: 
      next_step_id: 6
      position: 1
      attrs_count: 
      nav_step: 
      nav_step_name: 
      signin_required: false
      before_snippet: ! "# redirect if logged in\r\nif merged_hash[\"session\"]\r\n
        \ agent = MlsAgent.new(merged_hash.slice(*MlsAgent.fake_api_keys))\r\n  agent.valid?\r\n
        \ user_hash = agent.attributes.slice(*User.api_keys).unprepend_keys(\"user_\")\r\n\r\n
        \ # cross populate\r\n  merged_hash.merge!(agent.attributes.slice(*User::REQ_KEYS
        + [\"user_uuid\", \"user_userid\"]))\r\n\r\n  case\r\n  # send to dashboard
        to complete offer\r\n  when WMS::DAL::Admin::UserApi.has_accumulus_account?(user_hash)\r\n
        \   merged_hash[\"redirect_to\"] = \"/#{merged_hash['company_companypublickey']}/dashboard/offers/#{merged_hash['offer_offercode']}\"\r\n
        \   merged_hash[\"skip_validations\"] = true\r\n\r\n  # send to confirm accumulus
        details\r\n  when !user_hash[\"userid\"].to_s.strip.empty? \r\n    merged_hash[\"step_id\"]
        = 9\r\n    obj = OpenStruct.new(:valid => true)\r\n    obj.json = {:form_data
        => Stepre::Form.write_form_data(merged_hash)}.to_json\r\n    return obj\r\n
        \ end\r\nend"
      after_snippet: ''
      created_at: 2012-11-21 21:39:28.885190000 Z
      updated_at: 2012-12-06 03:38:21.633200000 Z
      attrs: {}
    6:
      id: 6
      form_id: 2
      name: mls
      template: processor/steps_custom/mls
      prev_step_id: 5
      next_step_id: 8
      position: 2
      attrs_count: 2
      nav_step: 
      nav_step_name: 
      signin_required: false
      before_snippet: ''
      after_snippet: ! "if obj.valid\r\n  agent = MlsAgent.new(merged_hash.slice(*MlsAgent.fake_api_keys))\r\n
        \ if agent.valid?\r\n    user_hash = agent.attributes.slice(*User.api_keys).unprepend_keys(\"user_\")\r\n\r\n
        \   case\r\n    # user has accumulus account && user account (no way for user
        to have accumulus account without user account)\r\n    when !merged_hash[\"session\"]
        && WMS::DAL::Admin::UserApi.has_accumulus_account?(user_hash)\r\n      # redirect
        to signin step\r\n      merged_hash[\"step_id\"] = 7\r\n\r\n    # user does
        not have accumulus account && has valid user account\r\n    # HACK: validate
        by inspecting userid in hash; should be an API call\r\n    when !merged_hash[\"session\"]
        && !user_hash[\"userid\"].to_s.strip.empty?\r\n      # redirect to signin
        step\r\n      merged_hash[\"step_id\"] = 7\r\n    else\r\n      # cross populate\r\n
        \     if user = User.find(agent.user_uuid)\r\n        merged_hash.merge!(user.api_keys_hash.slice(*User::REQ_KEYS
        + [\"user_uuid\", \"user_userid\"]))\r\n      else\r\n        merged_hash.merge!(agent.attributes.slice(*User::REQ_KEYS
        + [\"user_uuid\", \"user_userid\"]))\r\n      end\r\n    end\r\n  else\r\n
        \  obj.json = agent.errors.to_json\r\n   obj.valid = false\r\n  end\r\nend"
      created_at: 2012-11-21 21:43:51.732797000 Z
      updated_at: 2012-12-06 03:39:42.886225000 Z
      attrs:
        8:
          id: 8
          name: user_mlsagent
          display_name: MLS Agent
          step_id: 6
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-21 22:48:03.687100000 Z
          updated_at: 2012-11-21 22:48:03.687100000 Z
          validations:
            6:
              id: 6
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 22:48:25.136653000 Z
              updated_at: 2012-11-21 22:48:25.136653000 Z
        9:
          id: 9
          name: user_mlsid
          display_name: MLS ID
          step_id: 6
          reck: 'false'
          form_id: 2
          element: select
          created_at: 2012-11-26 16:28:43.137717000 Z
          updated_at: 2012-11-26 16:28:43.137717000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
    7:
      id: 7
      form_id: 2
      name: signin
      template: processor/steps_custom/signin
      prev_step_id: 6
      next_step_id: 9
      position: 3
      attrs_count: 2
      nav_step: 
      nav_step_name: 
      signin_required: false
      before_snippet: ''
      after_snippet: ! "if obj.valid\r\n  auth_hash = {}\r\n  # delete sensitive keys
        from \r\n  [\"user_userpassword\"].each {|k| auth_hash[k] = merged_hash.delete(k)}\r\n
        \ auth_hash[\"user_username\"] = merged_hash[\"user_username\"]\r\n  auth_session
        = Auth::Session.new(auth_hash)\r\n  auth_session.validate_via_api\r\n  if
        !auth_session.errors.any?\r\n    # cross populate\r\n    merged_hash.merge!(auth_session.user.api_keys_hash.slice(*User::REQ_KEYS
        + [\"user_uuid\", \"user_userid\"]))\r\n    # set session var\r\n    merged_hash[\"session\"]
        = true\r\n\r\n    # data to pass to cas nonajax_submit for post\r\n    auth_array
        = [ \r\n      {name: 'username', value: auth_session.user_username},\r\n      {name:
        'password', value: auth_session.user_userpassword},\r\n      {name: 'lt',
        value: Auth::Session.cas_ticket},\r\n    ]\r\n    # overwrite existing json\r\n
        \   obj.json = {:cas => true, :form_data => auth_array}.to_json\r\n\r\n    service_hash
        = {:host => \"localhost:3000\", :only_path => false, :method => \"post\",
        :form_data => Stepre::Form.write_form_data(merged_hash)}\r\n\r\n    local_redirect_hash
        = {:host => \"localhost:3000\", :only_path => true, :company_uuid => merged_hash[\"company_companypublickey\"],
        :id => merged_hash[\"offer_offercode\"]}\r\n\r\n    agent = MlsAgent.new(merged_hash.slice(*MlsAgent.fake_api_keys))\r\n
        \   agent.valid?\r\n    user_hash = agent.attributes.slice(*User.api_keys).unprepend_keys(\"user_\")\r\n
        \   if WMS::DAL::Admin::UserApi.has_accumulus_account?(user_hash)\r\n      service_hash[:redirect]
        = \"/#{merged_hash['company_companypublickey']}/dashboard/offers/#{merged_hash['offer_offercode']}\"\r\n
        \   else\r\n      service_hash[:redirect] = Rails.application.routes.url_helpers.processor_offer_url(local_redirect_hash)\r\n
        \   end\r\n\r\n    service_url = Rails.application.routes.url_helpers.welcome_url(service_hash)\r\n
        \   obj.location = Auth::Session::LOGIN_URL + Auth::Session::redir_params(service_url)\r\n
        \   return obj\r\n  else\r\n    obj.valid = false\r\n    obj.json = auth_session.errors.to_json\r\n
        \   return obj\r\n  end\r\nend"
      created_at: 2012-11-26 16:31:16.004135000 Z
      updated_at: 2012-12-06 03:40:01.878864000 Z
      attrs:
        22:
          id: 22
          name: user_username
          display_name: Username
          step_id: 7
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-12-03 23:04:44.734609000 Z
          updated_at: 2012-12-03 23:04:44.734609000 Z
          validations:
            6:
              id: 6
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 22:48:25.136653000 Z
              updated_at: 2012-11-21 22:48:25.136653000 Z
        23:
          id: 23
          name: user_userpassword
          display_name: Password
          step_id: 7
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-12-04 00:51:26.409160000 Z
          updated_at: 2012-12-04 00:51:37.694583000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
    8:
      id: 8
      form_id: 2
      name: register
      template: processor/steps/register
      prev_step_id: 6
      next_step_id: 11
      position: 3
      attrs_count: 12
      nav_step: 
      nav_step_name: 
      signin_required: false
      before_snippet: ''
      after_snippet: ! "if obj.valid\r\n  agent = MlsAgent.new(merged_hash.slice(*MlsAgent.fake_api_keys))\r\n
        \ unless agent.valid?\r\n    obj.valid = false\r\n    obj.errors = agent.errors.to_json\r\n
        \   return obj\r\n  end\r\n\r\n  user = User.new(merged_hash.slice(*User.form_keys).merge(agent.attributes.slice(*User.api_keys
        - %w[user_userpassword user_userpassword_confirmation user_email_display user_email_display_confirmation])))\r\n\r\n
        \ if user.valid?\r\n    # lookup all mls\r\n    mls_array = WMS::DAL::Admin::UserApi.get_mls_by_company_uuid(agent.company_companypublickey)\r\n
        \   unless mls_hash = mls_array.detect {|o| merged_hash[\"user_mlsid\"]}\r\n
        \     obj.valid = false\r\n      obj.json = {:base => [\"User MLS not found
        in Company associated MLS list\"]}\r\n      return obj\r\n    end\r\n    user.mls
        = Mls.new(mls_hash.prepend_keys(\"mls_\"))\r\n    user.office = Office.new(agent.attributes.slice(*Office.api_keys))\r\n
        \   user.company = Company.new(agent.attributes.slice(*Company.api_keys))\r\n\r\n
        \   if user.save\r\n      # cross populate\r\n      merged_hash[\"offer_userid\"]
        = user.user_userid\r\n      merged_hash.merge!(user.api_keys_hash.slice(*User::REQ_KEYS
        + [\"user_uuid\", \"user_userid\"]))\r\n\r\n      offer_hash = merged_hash.slice(*Offer::OFFER_KEYS)\r\n
        \     offer = Offer.new(offer_hash)\r\n      if offer.valid?\r\n        offer.set_iframe_url!\r\n
        \       merged_hash[\"offer_iframe_url\"] = offer.offer_iframe_url\r\n        obj.json
        = {:form_data => Stepre::Form.write_form_data(merged_hash)}.to_json\r\n      else\r\n
        \       obj.valid = false\r\n        obj.json = offer.errors.to_json\r\n      end\r\n
        \   else\r\n      obj.valid = false\r\n      obj.json = user.errors.to_json\r\n
        \   end\r\n  else\r\n    obj.valid = false\r\n    obj.json = user.errors.to_json\r\n
        \ end\r\n  return obj\r\nend\r\n"
      created_at: 2012-11-26 16:32:49.609434000 Z
      updated_at: 2012-12-06 01:36:31.189811000 Z
      attrs:
        10:
          id: 10
          name: user_firstname_display
          display_name: First Name
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:00:07.829140000 Z
          updated_at: 2012-11-26 18:00:07.829140000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        11:
          id: 11
          name: user_lastname_display
          display_name: Last Name
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:00:33.445578000 Z
          updated_at: 2012-11-26 18:00:33.445578000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        12:
          id: 12
          name: user_homeaddress_display
          display_name: Address
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:00:53.618151000 Z
          updated_at: 2012-11-26 18:00:53.618151000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        13:
          id: 13
          name: user_homecity_display
          display_name: City
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:01:09.568078000 Z
          updated_at: 2012-11-26 18:01:09.568078000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        14:
          id: 14
          name: user_homestate
          display_name: State
          step_id: 8
          reck: 'false'
          form_id: 2
          element: select
          created_at: 2012-11-26 18:01:29.703655000 Z
          updated_at: 2012-11-26 18:01:29.703655000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        15:
          id: 15
          name: user_zipcode
          display_name: ZIP
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:01:45.620316000 Z
          updated_at: 2012-11-26 18:01:45.620316000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        16:
          id: 16
          name: user_email_display
          display_name: Email
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:02:09.546089000 Z
          updated_at: 2012-11-26 18:02:09.546089000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
            7:
              id: 7
              name: validates_confirmation_of
              desc: ''
              snippet: validates_confirmation_of :ATTR, :message => "does not match
                confirmation"
              created_at: 2012-11-26 18:19:36.086017000 Z
              updated_at: 2012-11-26 18:19:36.086017000 Z
        17:
          id: 17
          name: user_username
          display_name: Username
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:02:29.488923000 Z
          updated_at: 2012-11-26 18:02:29.488923000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        18:
          id: 18
          name: user_userpassword
          display_name: Password
          step_id: 8
          reck: 'false'
          form_id: 2
          element: password
          created_at: 2012-11-26 18:02:48.268506000 Z
          updated_at: 2012-11-26 18:02:48.268506000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
            7:
              id: 7
              name: validates_confirmation_of
              desc: ''
              snippet: validates_confirmation_of :ATTR, :message => "does not match
                confirmation"
              created_at: 2012-11-26 18:19:36.086017000 Z
              updated_at: 2012-11-26 18:19:36.086017000 Z
        19:
          id: 19
          name: offer_seats
          display_name: Subscription Licenses
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:06:57.745310000 Z
          updated_at: 2012-11-26 18:06:57.745310000 Z
          validations: {}
        20:
          id: 20
          name: user_email_display_confirmation
          display_name: Confirm Email
          step_id: 8
          reck: 'false'
          form_id: 2
          element: input
          created_at: 2012-11-26 18:09:59.024082000 Z
          updated_at: 2012-11-26 18:09:59.024082000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
        21:
          id: 21
          name: user_userpassword_confirmation
          display_name: Confirm Password
          step_id: 8
          reck: 'false'
          form_id: 2
          element: password
          created_at: 2012-11-26 18:17:45.098185000 Z
          updated_at: 2012-11-26 18:17:45.098185000 Z
          validations:
            5:
              id: 5
              name: validates_presence_of
              desc: ''
              snippet: validates_presence_of :ATTR
              created_at: 2012-11-21 20:57:02.713302000 Z
              updated_at: 2012-11-21 21:00:29.586165000 Z
    9:
      id: 9
      form_id: 2
      name: confirm
      template: processor/steps/confirm
      prev_step_id: 5
      next_step_id: 11
      position: 3
      attrs_count: 
      nav_step: 
      nav_step_name: 
      signin_required: false
      before_snippet: ''
      after_snippet: ! "if obj.valid && merged_hash[\"session\"]\r\n  if current_user
        = User.find(merged_hash[\"user_uuid\"])\r\n    update_hash = merged_hash.slice(*User::BILLING_KEYS)\r\n
        \   update_hash = current_user.api_keys_hash.merge(update_hash)\r\n    current_user.form_id
        = 'C'\r\n  else\r\n    obj.valid = false\r\n    current_user = User.new\r\n
        \   current_user.errors.add(:base, \"Invalid User ID\")\r\n  end\r\n\r\n  if
        obj.valid && current_user.update_attributes(update_hash)\r\n    merged_hash[\"offer_userid\"]
        = merged_hash[\"user_userid\"]\r\n    offer_hash = merged_hash.slice(*Offer::OFFER_KEYS)\r\n
        \   offer = Offer.new(offer_hash)\r\n    if offer.valid?\r\n      offer.set_iframe_url!\r\n
        \     merged_hash[\"offer_iframe_url\"] = offer.offer_iframe_url\r\n      obj.json
        = {:form_data => Stepre::Form.write_form_data(merged_hash)}.to_json\r\n    else\r\n
        \     obj.valid = false\r\n      obj.json = offer.errors.to_json\r\n    end\r\n
        \ else\r\n    obj.valid = false\r\n    obj.json = current_user.errors.to_json\r\n
        \ end\r\n  return obj\r\nend\r\n"
      created_at: 2012-11-26 16:36:22.805629000 Z
      updated_at: 2012-12-06 03:40:18.592108000 Z
      attrs: {}
    11:
      id: 11
      form_id: 2
      name: accumulus_iframe
      template: processor/steps_custom/accumulus_iframe
      prev_step_id: 
      next_step_id: 
      position: 4
      attrs_count: 
      nav_step: 
      nav_step_name: 
      signin_required: false
      before_snippet: ''
      after_snippet: ''
      created_at: 2012-11-26 16:42:47.689970000 Z
      updated_at: 2012-12-06 03:40:31.299769000 Z
      attrs: {}
