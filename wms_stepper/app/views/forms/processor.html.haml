= @step.attrs.inspect
.span3
  %ul
    %li nav

.span9
  = simple_form_for(@form.element, :url => "#", :html => {:id => @form.element, :class => "form-horizontal", :novalidate => "novalidate"}) do |f|
    %input{:type => "hidden", :value => @form_data, :name => "form_data"}
    - @step.attrs.each do |attr|
      - case attr.element
      - when "input"
        = f.input attr.name, :label => attr.display_name, :required => attr.reck 
      - when "select"
        = f.input attr.name, :label => attr.display_name, :required => attr.reck, :as => :select
      - when "password"
        = f.input attr.name, :label => attr.display_name, :required => attr.reck, :as => :password
      - when "textarea"
        = f.input attr.name, :label => attr.display_name, :required => attr.reck, :as => :text


    .form-actions
      .row-fluid
        .span6
          - if @step.prev_step_id
            %button.btn.btn-large.btn-primary{:type => "submit", :id => "prev_button"}
              %i.icon-arrow-left.icon-white
              &nbsp;
              Previous

          = link_to t(:cancel), @form.cancel_url, :class => "cancel-link"
          

        .span6
          - if @step.next_step_id
            %button.btn.btn-large.btn-primary.pull-right{:type => "submit", :id => "next_button"} 
              Next 
              &nbsp;
              %i.icon-arrow-right.icon-white
          - else
            %button.btn.btn-large.btn-primary.pull-right{:type => "submit", :id => "next_button"} 
              Complete

- content_for :beam_down do
  :coffeescript
    $ ->
      Stingre.Helpers.cas_submit({elem: '#{@form.element}', url: '/forms/#{@form.id}/processor_api#{@remote ? "_remote" : nil}', prefix: '#{@form.element}'})
      Stingre.Helpers.populate_form({elem: '#{@form.element}', prefix: '#{@form.element}'})
